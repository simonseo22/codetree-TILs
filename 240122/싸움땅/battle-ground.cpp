// n*n 격자, 각 격자에는 무기
// 초기에는 무기 없이 빈 격자, 플레이어는 초기 능력치(모두 다름)
// 총의 공격력, 플레이어 초기 능력치, 플레이어 번호 존재

// 라운드
// 1) 첫번째 플레이어 부터 순차적으로 본인이 향하는 방향대로 1칸 이동
// - 격자를 벗어나는 경우 정반대 방향으로 1 칸이동
// 2-1) 이동 방향에 플레이어가 없으면 총이 있는지 확인, 총이있으면 획득
// - 이미 총을 가진 경우 공격력이 더센 총 획득, 나머지 총은 해당 격자에 둠 ( 같으면 변화x)
// 2-2-1) 이동 방향에 플레이어가 있으면 싸움
// - 해당 플레이어의 초기 능력치 +  총의 공격력의 합을 비교해 더큰 플레이어 승리
// - 위 수치가 동일한 경우 초기 능력치가 더 높은 플레이어 승리
// - 이긴 플레이어는 각 플레이어와 초기 능력치+ 총의 공격력의 차이 만큼 포인트 획든
// 2-2-2) 진 플레이어는 가지고 있는 총을 격자에 내려놓음 (총의 개수는 변할수있음)
// - 해당 플레이어가 원래 가지고 있던 방향대로 1칸이동
// - 만약 이동하려는 칸에 다른 플레이어가 있거나, 격자 밖이면 오른쪽으로 90도씩 회전하여 빈칸으로 이동
// - 만약 해당 칸에 총이 있으면 가장 공격력이 높은 총을 획득, 남은총은 격자자리에 놓음
// 2-2-3) 이긴 플레이어는 승리한 칸에 떨어져 있는 총들과 원래 있던 총중 가장 공격력 높은 총 획득
// - 나머지 총은 격자에 내려 놓음
// 위 과정을 1~n번 플레이어 까지 순차적으로 진행 : 1라운드

// *입력
// 1) n(격자크기 2~20), m(플레이어수 1~min(n2,30), 최대 30명),k(라운드수, 1~500)
// 2~(n) ) 격자에 있는 총의 정보, 0은 빈칸
// (m) ) 플레이어정보 x,y(1~n),d(0~3),s (1~100, 모든 플레이어가 다름), 
// 각 플레이어의 위치는 겹쳐져 주어지지 않으며, 초기 위치에 총은 존재X

// 격자에 있어야 하는 정보 내려져 있는 총, 총이 여러개가 있을수 있음 -> vector배열을 이용
// 순서를 index로 위치, 방향, 능력치가 주어짐
// ? 총의 위치가 플레이어와 함께 이동 -> 플레이가 가진 총의 값도 플레이어 배열에 추가

#include <iostream>

int main() {
    // 여기에 코드를 작성해주세요.
    return 0;
}