// *문제
// 1) 경주 시작 준비
// - p마리의 토끼가 N*m격자위에 경주 진행 준비 (각 토끼는 고유 번호 존재)
// - 한번 움직일시 꼭 이동해야 하는 거리가 정해짐
// - i토끼의 고유번호 pid_i, 이동거리 d_i
// - 토끼들은 처음에 전부 1행, 1열에 존재

// 2) 경주진행
// - 가장 우선순위가 높은 토끼를 뽑아 멀리 보내주는것을 k번 반복
// - 우선순위는 순서대로
// - (현재까지 총 점프횟수가 적은 , 현재 행번호+ 열번호가 작은, 행번호가 작은, 열번호가 작은, 고유번호가 작은)
// - 우선순위 높은 토끼가 정해지고 i번이라고 가정, 상하좌우로 d_i만큼 이동시 위치 계산 
// - 이때 격자를 벗어나면 방향을 바꿔 이동
// - 구한 4개의 위치중 (행+열 큰칸, 행번호가 큰, 열번호가 큰) 우선순위로 토끼 이동 
// - 이동시킨 칸의 위치 r_i, c_i라 하할때 i번 토끼를 제외한 나머지 P-1토끼들은 r_i + c_i점수 동시 획득
// - k번동안 우선 순위가 높은 토끼를 뽑아 멀리보내주기 반복, 동일한 토끼 여러번 선택 가능
// - k번 반복후 (현재 행번호+열번호 큰, 행번호큰, 열번호큰, 고유번호 큰) 순으로 우선순위를 둘떄
// - 우선순위가 높은 토끼에게 점수 S를 더해줌
// - 이때는 k번 동안 한번이라도 뽑혔던 토끼중에서 골라야함
// 3) 이동거리변경
// - 고유 번호가 pidt인 토끼의 이동거리를 L배, 계산 도중 토끼의 이동거리가 10억을 넘어가진 않음을 가정
// 4) 최고의 토끼 선정
// - 모든 경주 후 가장 높은 점수 출력
// q번에 걸쳐 명령 수행후 최고의 토끼 출력


// *입력
// 1) 명령의수 q(2~4,002번에
// 2~ (q) ) 명령 정보
// 1) 경주 시작 준비
// - 100 N M(2~100,000) P(2000) pid_1 d_1 pid_2 d_2 ... pid_p d_p
// - p마리의 토끼까 N*M 격자 위에서 경주 진행, 이명령은 항상 첫번쨰로 주어지며 항상 주어짐
// 2) 경주 진행
// - 200 k(경주 반복 min(100,p)) S(반복후 우선순위 높은 토끼에서 점수) 를
// - 최대 2000번까지만 주어짐
// 3) 이동거리 변경
// - 300 pid_t L(거리 L배, 1,000,000,000)
// 4) 최고의 토끼 선정
// - 400 이명령어는 정확히 마지막 명령으로 주어지며 항상 주어짐

// *출력
// - p마리 토끼의 최종 점수의 최댓값

#include <iostream>

int main() {
    // 여기에 코드를 작성해주세요.
    return 0;
}